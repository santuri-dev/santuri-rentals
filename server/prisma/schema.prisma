generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  username       String  @unique(map: "User_name_key")
  firstName      String?
  lastName       String?
  email          String  @unique
  phoneNumber    String?
  password       String
  image          String?
  imgPlaceholder String?

  resetPasswordToken String?

  emailVerified    DateTime?
  verificationCode String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Session       Session[]
  GearCheckout  GearCheckout[]  @relation(name: "borrower")
  StudioRequest StudioRequest[]

  roleId Int?
  role   Role? @relation(fields: [roleId], references: [id])
}

model UserInvite {
  id    Int    @id @default(autoincrement())
  email String @unique
  token String

  roleId Int
  role   Role @relation(fields: [roleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Role {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  gearDiscount   Float        @default(0.0)
  studioDiscount Float        @default(0.0)
  users          User[]
  UserInvite     UserInvite[]
}

model Session {
  id Int @id @default(autoincrement())

  expires   DateTime
  userAgent String

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Gear {
  id Int @id @default(autoincrement())

  name         String
  serialNumber String @unique
  condition    String
  status       String

  peripherals String[] @default([])
  notes       String?

  gearCheckoutId Int?
  gearCheckout   GearCheckout? @relation(fields: [gearCheckoutId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model GearCheckout {
  id Int @id @default(autoincrement())

  items Int[]

  borrower   User @relation(fields: [borrowerId], references: [id], name: "borrower")
  borrowerId Int

  returnDate DateTime
  pickupDate DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  closed     Boolean    @default(false)
  closedBy   AdminUser? @relation(fields: [closedById], references: [id])
  closedById Int?

  Gear Gear[]
}

model Course {
  id Int @id @default(autoincrement())

  slug             String   @unique
  name             String
  description      String
  cost             Float
  startDate        DateTime
  endDate          DateTime
  location         String
  imageUrl         String?
  imagePlaceholder String?

  applicationDeadline DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model AdminUser {
  id Int @id @default(autoincrement())

  username    String
  firstName   String?
  lastName    String?
  email       String  @unique
  phoneNumber String?
  password    String
  image       String?
  role        String  @default("admin")

  emailVerified    DateTime?
  verificationCode String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  AdminSession AdminSession[]
  GearCheckout GearCheckout[]
}

model AdminSession {
  id Int @id @default(autoincrement())

  expires   DateTime
  userAgent String

  adminUserId Int

  adminUser AdminUser @relation(fields: [adminUserId], references: [id])
}

model StudioRequest {
  id Int @id @default(autoincrement())

  typeId    Int
  type      StudioType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  startTime DateTime
  endTime   DateTime
  status    String     @default("pending")
  gearItems Int[]
  cost      Float

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RestrictedDates {
  id   Int      @id @default(autoincrement())
  date DateTime @unique
}

model StudioType {
  id            Int             @id @default(autoincrement())
  name          String
  description   String
  pricing       Float
  StudioRequest StudioRequest[]
}

model Product {
  id Int @id @default(autoincrement())

  slug String @unique

  name             String
  description      String
  imageUrl         String?
  imagePlaceholder String?
  status           String  @default("draft")
  currency         String
  price            Float

  stock Int

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  createdAt DateTime    @default(now())
  OrderItem OrderItem[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model OrderItem {
  id Int @id @default(autoincrement())

  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int

  price    Float
  currency String

  orderId Int?
  Order   Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Order {
  id Int @id @default(autoincrement())

  status     String
  orderItems OrderItem[]
  ref        String
  trackingId String?     @unique

  firstName String?
  lastName  String?
  email     String
  phone     String?

  totalCost Float
  currency  String

  createdAt DateTime @default(now())
}
