generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  username       String  @unique(map: "User_name_key")
  firstName      String?
  lastName       String?
  email          String  @unique
  phoneNumber    String?
  password       String
  image          String?
  imgPlaceholder String?

  resetPasswordToken String?

  emailVerified    DateTime?
  verificationCode String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Session      Session[]
  GearCheckout GearCheckout[] @relation(name: "borrower")
}

model Session {
  id Int @id @default(autoincrement())

  expires   DateTime
  userAgent String

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Gear {
  id Int @id @default(autoincrement())

  name         String
  serialNumber String @unique
  condition    String
  status       String

  peripherals String[] @default([])
  notes       String?

  gearCheckoutId Int?
  gearCheckout   GearCheckout? @relation(fields: [gearCheckoutId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model GearCheckout {
  id Int @id @default(autoincrement())

  items Int[]

  borrower   User @relation(fields: [borrowerId], references: [id], name: "borrower")
  borrowerId Int

  returnDate DateTime
  pickupDate DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  closed     Boolean    @default(false)
  closedBy   AdminUser? @relation(fields: [closedById], references: [id])
  closedById Int?

  Gear Gear[]
}

model Course {
  id Int @id @default(autoincrement())

  slug        String   @unique
  name        String
  description String
  cost        Float
  startDate   DateTime
  endDate     DateTime
  location    String

  applicationDeadline DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model AdminUser {
  id Int @id @default(autoincrement())

  firstName   String
  lastName    String
  email       String  @unique
  phoneNumber String?
  password    String
  image       String?
  role        String

  emailVerified    DateTime?
  verificationCode String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  AdminSession AdminSession[]
  GearCheckout GearCheckout[]
}

model AdminSession {
  id Int @id @default(autoincrement())

  expires   DateTime
  userAgent String

  adminUserId Int

  adminUser AdminUser @relation(fields: [adminUserId], references: [id])
}
